// <auto-generated />
using System;
using EffortlessApi.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EffortlessApi.Migrations
{
    [DbContext(typeof(EffortlessContext))]
    [Migration("20181129133702_Test")]
    partial class Test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EffortlessApi.Core.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("Floor");

                    b.Property<int>("No");

                    b.Property<string>("Side");

                    b.Property<string>("State");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<int>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.Agreement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("HolidaySubsidy");

                    b.Property<bool>("IsBreakPaid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("NightSubsidy");

                    b.Property<decimal>("Salary");

                    b.Property<decimal>("UnitPrice");

                    b.Property<string>("Version");

                    b.Property<decimal>("WeekendSubsidy");

                    b.HasKey("Id");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApprovedByOwner");

                    b.Property<DateTime>("ApprovedByOwnerDate");

                    b.Property<long>("ApprovedByUserId");

                    b.Property<DateTime>("ApprovedDate");

                    b.Property<long>("Break");

                    b.Property<long>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("Earnings");

                    b.Property<long>("OwnerId");

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("Stop");

                    b.Property<long>("WorkPeriodId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("WorkPeriodId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AddressId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("ParentCompanyId");

                    b.Property<int>("Pno");

                    b.Property<int>("Vat");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AddressId");

                    b.Property<long>("CompanyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.Privilege", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.RolePrivilege", b =>
                {
                    b.Property<long>("RoleId");

                    b.Property<long>("PrivilegeId");

                    b.HasKey("RoleId", "PrivilegeId");

                    b.HasIndex("PrivilegeId");

                    b.ToTable("RolePrivileges");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AddressId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.UserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.UserWorkPeriod", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("WorkPeriodId");

                    b.Property<long?>("WorkPeriodId1");

                    b.HasKey("UserId", "WorkPeriodId");

                    b.HasIndex("WorkPeriodId");

                    b.HasIndex("WorkPeriodId1");

                    b.ToTable("UserWorkPeriods");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.WorkPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DepartmentId");

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("Stop");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("WorkPeriods");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.Appointment", b =>
                {
                    b.HasOne("EffortlessApi.Core.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EffortlessApi.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EffortlessApi.Core.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EffortlessApi.Core.Models.WorkPeriod", "WorkPeriod")
                        .WithMany()
                        .HasForeignKey("WorkPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.Department", b =>
                {
                    b.HasOne("EffortlessApi.Core.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EffortlessApi.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.RolePrivilege", b =>
                {
                    b.HasOne("EffortlessApi.Core.Models.Privilege", "Privilege")
                        .WithMany("RolePrivileges")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EffortlessApi.Core.Models.Role", "Role")
                        .WithMany("RolePrivileges")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.UserRole", b =>
                {
                    b.HasOne("EffortlessApi.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EffortlessApi.Core.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.UserWorkPeriod", b =>
                {
                    b.HasOne("EffortlessApi.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EffortlessApi.Core.Models.WorkPeriod", "WorkPeriod")
                        .WithMany()
                        .HasForeignKey("WorkPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EffortlessApi.Core.Models.WorkPeriod")
                        .WithMany("UserWorkPeriods")
                        .HasForeignKey("WorkPeriodId1");
                });

            modelBuilder.Entity("EffortlessApi.Core.Models.WorkPeriod", b =>
                {
                    b.HasOne("EffortlessApi.Core.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
